==============
django-request
==============

.. include:: long_description.txt

First steps
-----------

    * :ref:`Installation <install>`
    * :ref:`Settings <settings>`
    * :ref:`Template tags <templatetags>`

Quick start guide
=================

.. note::

    To find the request overview page, please click on Requests inside the admin, then "Overview" on the top right, next to "add request".

Once you have installed ``django-request`` you can add it to a django project by following these steps;

    #. Install the blog app by adding ``'request'`` to ``INSTALLED_APPS``.

    #. Run ``manage.py migrate`` so that Django will create the database tables.

    #. Add ``request.middleware.RequestMiddleware`` to ``MIDDLEWARE``. If you use ``django.contrib.auth.middleware.AuthenticationMiddleware``, place ``RequestMiddleware`` after it. If you use ``django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`` place ``request.middleware.RequestMiddleware`` before it else flatpages will be marked as error pages in the admin panel.

    #. Add ``REQUEST_BASE_URL`` to your settings with the base URL of your site
       (e.g. ``https://www.my.site/``). This is used to calculate unique
       visitors and top referrers. ``REQUEST_BASE_URL`` defaults to
       ``'http://%s' % Site.objects.get_current().domain``.

django-admin.py
===============

purgerequests
-------------

This command can be used to purge old requests, it takes two arguments amount and duration. Example:

.. code-block:: bash

    $ python manage.py purgerequests 1 month
    $ python manage.py purgerequests 2 weeks

It also has a option called ``--noinput``, if this is supplied, it will not ask you to confirm. With this option you can use this command in a cron.

Valid durations: ``hour(s)``, ``day(s)``, ``week(s)``, ``month(s)``, ``year(s)``
